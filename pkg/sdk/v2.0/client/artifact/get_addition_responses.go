// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/goharbor/go-client/pkg/sdk/v2.0/models"
)

// GetAdditionReader is a Reader for the GetAddition structure.
type GetAdditionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAdditionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAdditionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAdditionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAdditionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAdditionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAdditionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetAdditionUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAdditionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAdditionOK creates a GetAdditionOK with default headers values
func NewGetAdditionOK() *GetAdditionOK {
	return &GetAdditionOK{}
}

/*
GetAdditionOK describes a response with status code 200, with default header values.

Success
*/
type GetAdditionOK struct {

	/* The content type of the addition
	 */
	ContentType string

	Payload string
}

// IsSuccess returns true when this get addition o k response has a 2xx status code
func (o *GetAdditionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get addition o k response has a 3xx status code
func (o *GetAdditionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get addition o k response has a 4xx status code
func (o *GetAdditionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get addition o k response has a 5xx status code
func (o *GetAdditionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get addition o k response a status code equal to that given
func (o *GetAdditionOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAdditionOK) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}][%d] getAdditionOK  %+v", 200, o.Payload)
}

func (o *GetAdditionOK) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}][%d] getAdditionOK  %+v", 200, o.Payload)
}

func (o *GetAdditionOK) GetPayload() string {
	return o.Payload
}

func (o *GetAdditionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Type
	hdrContentType := response.GetHeader("Content-Type")

	if hdrContentType != "" {
		o.ContentType = hdrContentType
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionBadRequest creates a GetAdditionBadRequest with default headers values
func NewGetAdditionBadRequest() *GetAdditionBadRequest {
	return &GetAdditionBadRequest{}
}

/*
GetAdditionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetAdditionBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get addition bad request response has a 2xx status code
func (o *GetAdditionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get addition bad request response has a 3xx status code
func (o *GetAdditionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get addition bad request response has a 4xx status code
func (o *GetAdditionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get addition bad request response has a 5xx status code
func (o *GetAdditionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get addition bad request response a status code equal to that given
func (o *GetAdditionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAdditionBadRequest) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}][%d] getAdditionBadRequest  %+v", 400, o.Payload)
}

func (o *GetAdditionBadRequest) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}][%d] getAdditionBadRequest  %+v", 400, o.Payload)
}

func (o *GetAdditionBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetAdditionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionUnauthorized creates a GetAdditionUnauthorized with default headers values
func NewGetAdditionUnauthorized() *GetAdditionUnauthorized {
	return &GetAdditionUnauthorized{}
}

/*
GetAdditionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAdditionUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get addition unauthorized response has a 2xx status code
func (o *GetAdditionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get addition unauthorized response has a 3xx status code
func (o *GetAdditionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get addition unauthorized response has a 4xx status code
func (o *GetAdditionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get addition unauthorized response has a 5xx status code
func (o *GetAdditionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get addition unauthorized response a status code equal to that given
func (o *GetAdditionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAdditionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}][%d] getAdditionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAdditionUnauthorized) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}][%d] getAdditionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAdditionUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetAdditionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionForbidden creates a GetAdditionForbidden with default headers values
func NewGetAdditionForbidden() *GetAdditionForbidden {
	return &GetAdditionForbidden{}
}

/*
GetAdditionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAdditionForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get addition forbidden response has a 2xx status code
func (o *GetAdditionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get addition forbidden response has a 3xx status code
func (o *GetAdditionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get addition forbidden response has a 4xx status code
func (o *GetAdditionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get addition forbidden response has a 5xx status code
func (o *GetAdditionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get addition forbidden response a status code equal to that given
func (o *GetAdditionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAdditionForbidden) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}][%d] getAdditionForbidden  %+v", 403, o.Payload)
}

func (o *GetAdditionForbidden) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}][%d] getAdditionForbidden  %+v", 403, o.Payload)
}

func (o *GetAdditionForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetAdditionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionNotFound creates a GetAdditionNotFound with default headers values
func NewGetAdditionNotFound() *GetAdditionNotFound {
	return &GetAdditionNotFound{}
}

/*
GetAdditionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetAdditionNotFound struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get addition not found response has a 2xx status code
func (o *GetAdditionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get addition not found response has a 3xx status code
func (o *GetAdditionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get addition not found response has a 4xx status code
func (o *GetAdditionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get addition not found response has a 5xx status code
func (o *GetAdditionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get addition not found response a status code equal to that given
func (o *GetAdditionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAdditionNotFound) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}][%d] getAdditionNotFound  %+v", 404, o.Payload)
}

func (o *GetAdditionNotFound) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}][%d] getAdditionNotFound  %+v", 404, o.Payload)
}

func (o *GetAdditionNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetAdditionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionUnprocessableEntity creates a GetAdditionUnprocessableEntity with default headers values
func NewGetAdditionUnprocessableEntity() *GetAdditionUnprocessableEntity {
	return &GetAdditionUnprocessableEntity{}
}

/*
GetAdditionUnprocessableEntity describes a response with status code 422, with default header values.

Unsupported Type
*/
type GetAdditionUnprocessableEntity struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get addition unprocessable entity response has a 2xx status code
func (o *GetAdditionUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get addition unprocessable entity response has a 3xx status code
func (o *GetAdditionUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get addition unprocessable entity response has a 4xx status code
func (o *GetAdditionUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get addition unprocessable entity response has a 5xx status code
func (o *GetAdditionUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get addition unprocessable entity response a status code equal to that given
func (o *GetAdditionUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *GetAdditionUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}][%d] getAdditionUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetAdditionUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}][%d] getAdditionUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetAdditionUnprocessableEntity) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetAdditionUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionInternalServerError creates a GetAdditionInternalServerError with default headers values
func NewGetAdditionInternalServerError() *GetAdditionInternalServerError {
	return &GetAdditionInternalServerError{}
}

/*
GetAdditionInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetAdditionInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get addition internal server error response has a 2xx status code
func (o *GetAdditionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get addition internal server error response has a 3xx status code
func (o *GetAdditionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get addition internal server error response has a 4xx status code
func (o *GetAdditionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get addition internal server error response has a 5xx status code
func (o *GetAdditionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get addition internal server error response a status code equal to that given
func (o *GetAdditionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAdditionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}][%d] getAdditionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAdditionInternalServerError) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}][%d] getAdditionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAdditionInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetAdditionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
