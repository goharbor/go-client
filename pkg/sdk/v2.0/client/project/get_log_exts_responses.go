// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/goharbor/go-client/pkg/sdk/v2.0/models"
)

// GetLogExtsReader is a Reader for the GetLogExts structure.
type GetLogExtsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLogExtsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLogExtsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLogExtsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLogExtsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLogExtsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLogExtsOK creates a GetLogExtsOK with default headers values
func NewGetLogExtsOK() *GetLogExtsOK {
	return &GetLogExtsOK{}
}

/*
GetLogExtsOK describes a response with status code 200, with default header values.

Success
*/
type GetLogExtsOK struct {

	/* Link refers to the previous page and next page
	 */
	Link string

	/* The total count of auditlogs
	 */
	XTotalCount int64

	Payload []*models.AuditLogExt
}

// IsSuccess returns true when this get log exts o k response has a 2xx status code
func (o *GetLogExtsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get log exts o k response has a 3xx status code
func (o *GetLogExtsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log exts o k response has a 4xx status code
func (o *GetLogExtsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get log exts o k response has a 5xx status code
func (o *GetLogExtsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get log exts o k response a status code equal to that given
func (o *GetLogExtsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetLogExtsOK) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/auditlog-exts][%d] getLogExtsOK  %+v", 200, o.Payload)
}

func (o *GetLogExtsOK) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/auditlog-exts][%d] getLogExtsOK  %+v", 200, o.Payload)
}

func (o *GetLogExtsOK) GetPayload() []*models.AuditLogExt {
	return o.Payload
}

func (o *GetLogExtsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// hydrates response header X-Total-Count
	hdrXTotalCount := response.GetHeader("X-Total-Count")

	if hdrXTotalCount != "" {
		valxTotalCount, err := swag.ConvertInt64(hdrXTotalCount)
		if err != nil {
			return errors.InvalidType("X-Total-Count", "header", "int64", hdrXTotalCount)
		}
		o.XTotalCount = valxTotalCount
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogExtsBadRequest creates a GetLogExtsBadRequest with default headers values
func NewGetLogExtsBadRequest() *GetLogExtsBadRequest {
	return &GetLogExtsBadRequest{}
}

/*
GetLogExtsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetLogExtsBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get log exts bad request response has a 2xx status code
func (o *GetLogExtsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log exts bad request response has a 3xx status code
func (o *GetLogExtsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log exts bad request response has a 4xx status code
func (o *GetLogExtsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log exts bad request response has a 5xx status code
func (o *GetLogExtsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get log exts bad request response a status code equal to that given
func (o *GetLogExtsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetLogExtsBadRequest) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/auditlog-exts][%d] getLogExtsBadRequest  %+v", 400, o.Payload)
}

func (o *GetLogExtsBadRequest) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/auditlog-exts][%d] getLogExtsBadRequest  %+v", 400, o.Payload)
}

func (o *GetLogExtsBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetLogExtsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogExtsUnauthorized creates a GetLogExtsUnauthorized with default headers values
func NewGetLogExtsUnauthorized() *GetLogExtsUnauthorized {
	return &GetLogExtsUnauthorized{}
}

/*
GetLogExtsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetLogExtsUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get log exts unauthorized response has a 2xx status code
func (o *GetLogExtsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log exts unauthorized response has a 3xx status code
func (o *GetLogExtsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log exts unauthorized response has a 4xx status code
func (o *GetLogExtsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log exts unauthorized response has a 5xx status code
func (o *GetLogExtsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get log exts unauthorized response a status code equal to that given
func (o *GetLogExtsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetLogExtsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/auditlog-exts][%d] getLogExtsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLogExtsUnauthorized) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/auditlog-exts][%d] getLogExtsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLogExtsUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetLogExtsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogExtsInternalServerError creates a GetLogExtsInternalServerError with default headers values
func NewGetLogExtsInternalServerError() *GetLogExtsInternalServerError {
	return &GetLogExtsInternalServerError{}
}

/*
GetLogExtsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetLogExtsInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get log exts internal server error response has a 2xx status code
func (o *GetLogExtsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log exts internal server error response has a 3xx status code
func (o *GetLogExtsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log exts internal server error response has a 4xx status code
func (o *GetLogExtsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get log exts internal server error response has a 5xx status code
func (o *GetLogExtsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get log exts internal server error response a status code equal to that given
func (o *GetLogExtsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetLogExtsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/auditlog-exts][%d] getLogExtsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLogExtsInternalServerError) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/auditlog-exts][%d] getLogExtsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLogExtsInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetLogExtsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
