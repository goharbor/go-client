// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListArtifactsOfProjectParams creates a new ListArtifactsOfProjectParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListArtifactsOfProjectParams() *ListArtifactsOfProjectParams {
	return &ListArtifactsOfProjectParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListArtifactsOfProjectParamsWithTimeout creates a new ListArtifactsOfProjectParams object
// with the ability to set a timeout on a request.
func NewListArtifactsOfProjectParamsWithTimeout(timeout time.Duration) *ListArtifactsOfProjectParams {
	return &ListArtifactsOfProjectParams{
		timeout: timeout,
	}
}

// NewListArtifactsOfProjectParamsWithContext creates a new ListArtifactsOfProjectParams object
// with the ability to set a context for a request.
func NewListArtifactsOfProjectParamsWithContext(ctx context.Context) *ListArtifactsOfProjectParams {
	return &ListArtifactsOfProjectParams{
		Context: ctx,
	}
}

// NewListArtifactsOfProjectParamsWithHTTPClient creates a new ListArtifactsOfProjectParams object
// with the ability to set a custom HTTPClient for a request.
func NewListArtifactsOfProjectParamsWithHTTPClient(client *http.Client) *ListArtifactsOfProjectParams {
	return &ListArtifactsOfProjectParams{
		HTTPClient: client,
	}
}

/*
ListArtifactsOfProjectParams contains all the parameters to send to the API endpoint

	for the list artifacts of project operation.

	Typically these are written to a http.Request.
*/
type ListArtifactsOfProjectParams struct {

	/* XAcceptVulnerabilities.

	     A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it.
	Currently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'

	     Default: "application/vnd.security.vulnerability.report; version=1.1, application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
	*/
	XAcceptVulnerabilities *string

	/* XIsResourceName.

	   The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
	*/
	XIsResourceName *bool

	/* XRequestID.

	   An unique ID for the request
	*/
	XRequestID *string

	/* LatestInRepository.

	   Specify whether only the latest pushed artifact of each repository is included inside the returning artifacts. Only works when either artifact_type or media_type is included in the query.
	*/
	LatestInRepository *bool

	/* Page.

	   The page number

	   Format: int64
	   Default: 1
	*/
	Page *int64

	/* PageSize.

	   The size of per page

	   Format: int64
	   Default: 10
	*/
	PageSize *int64

	/* ProjectNameOrID.

	   The name or id of the project
	*/
	ProjectNameOrID string

	/* Q.

	   Query string to query resources. Supported query patterns are "exact match(k=v)", "fuzzy match(k=~v)", "range(k=[min~max])", "list with union releationship(k={v1 v2 v3})" and "list with intersetion relationship(k=(v1 v2 v3))". The value of range and list can be string(enclosed by " or '), integer or time(in format "2020-04-09 02:36:00"). All of these query patterns should be put in the query string "q=xxx" and splitted by ",". e.g. q=k1=v1,k2=~v2,k3=[min~max]
	*/
	Q *string

	/* Sort.

	   Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending order and field2 in descending order with "sort=field1,-field2"
	*/
	Sort *string

	/* WithAccessory.

	   Specify whether the accessories are included of the returning artifacts. Only works when setting "with_accessory=true"
	*/
	WithAccessory *bool

	/* WithImmutableStatus.

	   Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting "with_immutable_status=true"
	*/
	WithImmutableStatus *bool

	/* WithLabel.

	   Specify whether the labels are included inside the returning artifacts
	*/
	WithLabel *bool

	/* WithSbomOverview.

	   Specify whether the SBOM overview is included in returning artifacts, when this option is true, the SBOM overview will be included in the response
	*/
	WithSbomOverview *bool

	/* WithScanOverview.

	   Specify whether the scan overview is included inside the returning artifacts
	*/
	WithScanOverview *bool

	/* WithTag.

	   Specify whether the tags are included inside the returning artifacts

	   Default: true
	*/
	WithTag *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list artifacts of project params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListArtifactsOfProjectParams) WithDefaults() *ListArtifactsOfProjectParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list artifacts of project params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListArtifactsOfProjectParams) SetDefaults() {
	var (
		xAcceptVulnerabilitiesDefault = string("application/vnd.security.vulnerability.report; version=1.1, application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0")

		xIsResourceNameDefault = bool(false)

		latestInRepositoryDefault = bool(false)

		pageDefault = int64(1)

		pageSizeDefault = int64(10)

		withAccessoryDefault = bool(false)

		withImmutableStatusDefault = bool(false)

		withLabelDefault = bool(false)

		withSbomOverviewDefault = bool(false)

		withScanOverviewDefault = bool(false)

		withTagDefault = bool(true)
	)

	val := ListArtifactsOfProjectParams{
		XAcceptVulnerabilities: &xAcceptVulnerabilitiesDefault,
		XIsResourceName:        &xIsResourceNameDefault,
		LatestInRepository:     &latestInRepositoryDefault,
		Page:                   &pageDefault,
		PageSize:               &pageSizeDefault,
		WithAccessory:          &withAccessoryDefault,
		WithImmutableStatus:    &withImmutableStatusDefault,
		WithLabel:              &withLabelDefault,
		WithSbomOverview:       &withSbomOverviewDefault,
		WithScanOverview:       &withScanOverviewDefault,
		WithTag:                &withTagDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithTimeout(timeout time.Duration) *ListArtifactsOfProjectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithContext(ctx context.Context) *ListArtifactsOfProjectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithHTTPClient(client *http.Client) *ListArtifactsOfProjectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXAcceptVulnerabilities adds the xAcceptVulnerabilities to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithXAcceptVulnerabilities(xAcceptVulnerabilities *string) *ListArtifactsOfProjectParams {
	o.SetXAcceptVulnerabilities(xAcceptVulnerabilities)
	return o
}

// SetXAcceptVulnerabilities adds the xAcceptVulnerabilities to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetXAcceptVulnerabilities(xAcceptVulnerabilities *string) {
	o.XAcceptVulnerabilities = xAcceptVulnerabilities
}

// WithXIsResourceName adds the xIsResourceName to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithXIsResourceName(xIsResourceName *bool) *ListArtifactsOfProjectParams {
	o.SetXIsResourceName(xIsResourceName)
	return o
}

// SetXIsResourceName adds the xIsResourceName to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetXIsResourceName(xIsResourceName *bool) {
	o.XIsResourceName = xIsResourceName
}

// WithXRequestID adds the xRequestID to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithXRequestID(xRequestID *string) *ListArtifactsOfProjectParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithLatestInRepository adds the latestInRepository to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithLatestInRepository(latestInRepository *bool) *ListArtifactsOfProjectParams {
	o.SetLatestInRepository(latestInRepository)
	return o
}

// SetLatestInRepository adds the latestInRepository to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetLatestInRepository(latestInRepository *bool) {
	o.LatestInRepository = latestInRepository
}

// WithPage adds the page to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithPage(page *int64) *ListArtifactsOfProjectParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetPage(page *int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithPageSize(pageSize *int64) *ListArtifactsOfProjectParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithProjectNameOrID adds the projectNameOrID to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithProjectNameOrID(projectNameOrID string) *ListArtifactsOfProjectParams {
	o.SetProjectNameOrID(projectNameOrID)
	return o
}

// SetProjectNameOrID adds the projectNameOrId to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetProjectNameOrID(projectNameOrID string) {
	o.ProjectNameOrID = projectNameOrID
}

// WithQ adds the q to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithQ(q *string) *ListArtifactsOfProjectParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetQ(q *string) {
	o.Q = q
}

// WithSort adds the sort to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithSort(sort *string) *ListArtifactsOfProjectParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithWithAccessory adds the withAccessory to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithWithAccessory(withAccessory *bool) *ListArtifactsOfProjectParams {
	o.SetWithAccessory(withAccessory)
	return o
}

// SetWithAccessory adds the withAccessory to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetWithAccessory(withAccessory *bool) {
	o.WithAccessory = withAccessory
}

// WithWithImmutableStatus adds the withImmutableStatus to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithWithImmutableStatus(withImmutableStatus *bool) *ListArtifactsOfProjectParams {
	o.SetWithImmutableStatus(withImmutableStatus)
	return o
}

// SetWithImmutableStatus adds the withImmutableStatus to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetWithImmutableStatus(withImmutableStatus *bool) {
	o.WithImmutableStatus = withImmutableStatus
}

// WithWithLabel adds the withLabel to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithWithLabel(withLabel *bool) *ListArtifactsOfProjectParams {
	o.SetWithLabel(withLabel)
	return o
}

// SetWithLabel adds the withLabel to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetWithLabel(withLabel *bool) {
	o.WithLabel = withLabel
}

// WithWithSbomOverview adds the withSbomOverview to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithWithSbomOverview(withSbomOverview *bool) *ListArtifactsOfProjectParams {
	o.SetWithSbomOverview(withSbomOverview)
	return o
}

// SetWithSbomOverview adds the withSbomOverview to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetWithSbomOverview(withSbomOverview *bool) {
	o.WithSbomOverview = withSbomOverview
}

// WithWithScanOverview adds the withScanOverview to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithWithScanOverview(withScanOverview *bool) *ListArtifactsOfProjectParams {
	o.SetWithScanOverview(withScanOverview)
	return o
}

// SetWithScanOverview adds the withScanOverview to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetWithScanOverview(withScanOverview *bool) {
	o.WithScanOverview = withScanOverview
}

// WithWithTag adds the withTag to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) WithWithTag(withTag *bool) *ListArtifactsOfProjectParams {
	o.SetWithTag(withTag)
	return o
}

// SetWithTag adds the withTag to the list artifacts of project params
func (o *ListArtifactsOfProjectParams) SetWithTag(withTag *bool) {
	o.WithTag = withTag
}

// WriteToRequest writes these params to a swagger request
func (o *ListArtifactsOfProjectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XAcceptVulnerabilities != nil {

		// header param X-Accept-Vulnerabilities
		if err := r.SetHeaderParam("X-Accept-Vulnerabilities", *o.XAcceptVulnerabilities); err != nil {
			return err
		}
	}

	if o.XIsResourceName != nil {

		// header param X-Is-Resource-Name
		if err := r.SetHeaderParam("X-Is-Resource-Name", swag.FormatBool(*o.XIsResourceName)); err != nil {
			return err
		}
	}

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	if o.LatestInRepository != nil {

		// query param latest_in_repository
		var qrLatestInRepository bool

		if o.LatestInRepository != nil {
			qrLatestInRepository = *o.LatestInRepository
		}
		qLatestInRepository := swag.FormatBool(qrLatestInRepository)
		if qLatestInRepository != "" {

			if err := r.SetQueryParam("latest_in_repository", qLatestInRepository); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	// path param project_name_or_id
	if err := r.SetPathParam("project_name_or_id", o.ProjectNameOrID); err != nil {
		return err
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.WithAccessory != nil {

		// query param with_accessory
		var qrWithAccessory bool

		if o.WithAccessory != nil {
			qrWithAccessory = *o.WithAccessory
		}
		qWithAccessory := swag.FormatBool(qrWithAccessory)
		if qWithAccessory != "" {

			if err := r.SetQueryParam("with_accessory", qWithAccessory); err != nil {
				return err
			}
		}
	}

	if o.WithImmutableStatus != nil {

		// query param with_immutable_status
		var qrWithImmutableStatus bool

		if o.WithImmutableStatus != nil {
			qrWithImmutableStatus = *o.WithImmutableStatus
		}
		qWithImmutableStatus := swag.FormatBool(qrWithImmutableStatus)
		if qWithImmutableStatus != "" {

			if err := r.SetQueryParam("with_immutable_status", qWithImmutableStatus); err != nil {
				return err
			}
		}
	}

	if o.WithLabel != nil {

		// query param with_label
		var qrWithLabel bool

		if o.WithLabel != nil {
			qrWithLabel = *o.WithLabel
		}
		qWithLabel := swag.FormatBool(qrWithLabel)
		if qWithLabel != "" {

			if err := r.SetQueryParam("with_label", qWithLabel); err != nil {
				return err
			}
		}
	}

	if o.WithSbomOverview != nil {

		// query param with_sbom_overview
		var qrWithSbomOverview bool

		if o.WithSbomOverview != nil {
			qrWithSbomOverview = *o.WithSbomOverview
		}
		qWithSbomOverview := swag.FormatBool(qrWithSbomOverview)
		if qWithSbomOverview != "" {

			if err := r.SetQueryParam("with_sbom_overview", qWithSbomOverview); err != nil {
				return err
			}
		}
	}

	if o.WithScanOverview != nil {

		// query param with_scan_overview
		var qrWithScanOverview bool

		if o.WithScanOverview != nil {
			qrWithScanOverview = *o.WithScanOverview
		}
		qWithScanOverview := swag.FormatBool(qrWithScanOverview)
		if qWithScanOverview != "" {

			if err := r.SetQueryParam("with_scan_overview", qWithScanOverview); err != nil {
				return err
			}
		}
	}

	if o.WithTag != nil {

		// query param with_tag
		var qrWithTag bool

		if o.WithTag != nil {
			qrWithTag = *o.WithTag
		}
		qWithTag := swag.FormatBool(qrWithTag)
		if qWithTag != "" {

			if err := r.SetQueryParam("with_tag", qWithTag); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
