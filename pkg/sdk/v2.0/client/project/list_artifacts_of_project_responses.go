// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/goharbor/go-client/pkg/sdk/v2.0/models"
)

// ListArtifactsOfProjectReader is a Reader for the ListArtifactsOfProject structure.
type ListArtifactsOfProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListArtifactsOfProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListArtifactsOfProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListArtifactsOfProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListArtifactsOfProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListArtifactsOfProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListArtifactsOfProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListArtifactsOfProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListArtifactsOfProjectOK creates a ListArtifactsOfProjectOK with default headers values
func NewListArtifactsOfProjectOK() *ListArtifactsOfProjectOK {
	return &ListArtifactsOfProjectOK{}
}

/*
ListArtifactsOfProjectOK describes a response with status code 200, with default header values.

Success
*/
type ListArtifactsOfProjectOK struct {

	/* Link refers to the previous page and next page
	 */
	Link string

	/* The total count of artifacts
	 */
	XTotalCount int64

	Payload []*models.Artifact
}

// IsSuccess returns true when this list artifacts of project o k response has a 2xx status code
func (o *ListArtifactsOfProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list artifacts of project o k response has a 3xx status code
func (o *ListArtifactsOfProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list artifacts of project o k response has a 4xx status code
func (o *ListArtifactsOfProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list artifacts of project o k response has a 5xx status code
func (o *ListArtifactsOfProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list artifacts of project o k response a status code equal to that given
func (o *ListArtifactsOfProjectOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListArtifactsOfProjectOK) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/artifacts][%d] listArtifactsOfProjectOK  %+v", 200, o.Payload)
}

func (o *ListArtifactsOfProjectOK) String() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/artifacts][%d] listArtifactsOfProjectOK  %+v", 200, o.Payload)
}

func (o *ListArtifactsOfProjectOK) GetPayload() []*models.Artifact {
	return o.Payload
}

func (o *ListArtifactsOfProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// hydrates response header X-Total-Count
	hdrXTotalCount := response.GetHeader("X-Total-Count")

	if hdrXTotalCount != "" {
		valxTotalCount, err := swag.ConvertInt64(hdrXTotalCount)
		if err != nil {
			return errors.InvalidType("X-Total-Count", "header", "int64", hdrXTotalCount)
		}
		o.XTotalCount = valxTotalCount
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListArtifactsOfProjectBadRequest creates a ListArtifactsOfProjectBadRequest with default headers values
func NewListArtifactsOfProjectBadRequest() *ListArtifactsOfProjectBadRequest {
	return &ListArtifactsOfProjectBadRequest{}
}

/*
ListArtifactsOfProjectBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ListArtifactsOfProjectBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list artifacts of project bad request response has a 2xx status code
func (o *ListArtifactsOfProjectBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list artifacts of project bad request response has a 3xx status code
func (o *ListArtifactsOfProjectBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list artifacts of project bad request response has a 4xx status code
func (o *ListArtifactsOfProjectBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list artifacts of project bad request response has a 5xx status code
func (o *ListArtifactsOfProjectBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list artifacts of project bad request response a status code equal to that given
func (o *ListArtifactsOfProjectBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListArtifactsOfProjectBadRequest) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/artifacts][%d] listArtifactsOfProjectBadRequest  %+v", 400, o.Payload)
}

func (o *ListArtifactsOfProjectBadRequest) String() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/artifacts][%d] listArtifactsOfProjectBadRequest  %+v", 400, o.Payload)
}

func (o *ListArtifactsOfProjectBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListArtifactsOfProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListArtifactsOfProjectUnauthorized creates a ListArtifactsOfProjectUnauthorized with default headers values
func NewListArtifactsOfProjectUnauthorized() *ListArtifactsOfProjectUnauthorized {
	return &ListArtifactsOfProjectUnauthorized{}
}

/*
ListArtifactsOfProjectUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListArtifactsOfProjectUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list artifacts of project unauthorized response has a 2xx status code
func (o *ListArtifactsOfProjectUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list artifacts of project unauthorized response has a 3xx status code
func (o *ListArtifactsOfProjectUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list artifacts of project unauthorized response has a 4xx status code
func (o *ListArtifactsOfProjectUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list artifacts of project unauthorized response has a 5xx status code
func (o *ListArtifactsOfProjectUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list artifacts of project unauthorized response a status code equal to that given
func (o *ListArtifactsOfProjectUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ListArtifactsOfProjectUnauthorized) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/artifacts][%d] listArtifactsOfProjectUnauthorized  %+v", 401, o.Payload)
}

func (o *ListArtifactsOfProjectUnauthorized) String() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/artifacts][%d] listArtifactsOfProjectUnauthorized  %+v", 401, o.Payload)
}

func (o *ListArtifactsOfProjectUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListArtifactsOfProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListArtifactsOfProjectForbidden creates a ListArtifactsOfProjectForbidden with default headers values
func NewListArtifactsOfProjectForbidden() *ListArtifactsOfProjectForbidden {
	return &ListArtifactsOfProjectForbidden{}
}

/*
ListArtifactsOfProjectForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListArtifactsOfProjectForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list artifacts of project forbidden response has a 2xx status code
func (o *ListArtifactsOfProjectForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list artifacts of project forbidden response has a 3xx status code
func (o *ListArtifactsOfProjectForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list artifacts of project forbidden response has a 4xx status code
func (o *ListArtifactsOfProjectForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list artifacts of project forbidden response has a 5xx status code
func (o *ListArtifactsOfProjectForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list artifacts of project forbidden response a status code equal to that given
func (o *ListArtifactsOfProjectForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListArtifactsOfProjectForbidden) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/artifacts][%d] listArtifactsOfProjectForbidden  %+v", 403, o.Payload)
}

func (o *ListArtifactsOfProjectForbidden) String() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/artifacts][%d] listArtifactsOfProjectForbidden  %+v", 403, o.Payload)
}

func (o *ListArtifactsOfProjectForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListArtifactsOfProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListArtifactsOfProjectNotFound creates a ListArtifactsOfProjectNotFound with default headers values
func NewListArtifactsOfProjectNotFound() *ListArtifactsOfProjectNotFound {
	return &ListArtifactsOfProjectNotFound{}
}

/*
ListArtifactsOfProjectNotFound describes a response with status code 404, with default header values.

Not found
*/
type ListArtifactsOfProjectNotFound struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list artifacts of project not found response has a 2xx status code
func (o *ListArtifactsOfProjectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list artifacts of project not found response has a 3xx status code
func (o *ListArtifactsOfProjectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list artifacts of project not found response has a 4xx status code
func (o *ListArtifactsOfProjectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list artifacts of project not found response has a 5xx status code
func (o *ListArtifactsOfProjectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list artifacts of project not found response a status code equal to that given
func (o *ListArtifactsOfProjectNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListArtifactsOfProjectNotFound) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/artifacts][%d] listArtifactsOfProjectNotFound  %+v", 404, o.Payload)
}

func (o *ListArtifactsOfProjectNotFound) String() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/artifacts][%d] listArtifactsOfProjectNotFound  %+v", 404, o.Payload)
}

func (o *ListArtifactsOfProjectNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListArtifactsOfProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListArtifactsOfProjectInternalServerError creates a ListArtifactsOfProjectInternalServerError with default headers values
func NewListArtifactsOfProjectInternalServerError() *ListArtifactsOfProjectInternalServerError {
	return &ListArtifactsOfProjectInternalServerError{}
}

/*
ListArtifactsOfProjectInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ListArtifactsOfProjectInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list artifacts of project internal server error response has a 2xx status code
func (o *ListArtifactsOfProjectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list artifacts of project internal server error response has a 3xx status code
func (o *ListArtifactsOfProjectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list artifacts of project internal server error response has a 4xx status code
func (o *ListArtifactsOfProjectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list artifacts of project internal server error response has a 5xx status code
func (o *ListArtifactsOfProjectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list artifacts of project internal server error response a status code equal to that given
func (o *ListArtifactsOfProjectInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListArtifactsOfProjectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/artifacts][%d] listArtifactsOfProjectInternalServerError  %+v", 500, o.Payload)
}

func (o *ListArtifactsOfProjectInternalServerError) String() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/artifacts][%d] listArtifactsOfProjectInternalServerError  %+v", 500, o.Payload)
}

func (o *ListArtifactsOfProjectInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListArtifactsOfProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
