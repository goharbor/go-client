// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the project client
type API interface {
	/*
	   CreateProject creates a new project

	   This endpoint is for user to create a new project.*/
	CreateProject(ctx context.Context, params *CreateProjectParams) (*CreateProjectCreated, error)
	/*
	   DeleteProject deletes project by project ID

	   This endpoint is aimed to delete project by project ID.*/
	DeleteProject(ctx context.Context, params *DeleteProjectParams) (*DeleteProjectOK, error)
	/*
	   GetLogExts gets recent logs of the projects

	   Get recent logs of the projects*/
	GetLogExts(ctx context.Context, params *GetLogExtsParams) (*GetLogExtsOK, error)
	/*
	   GetLogs gets recent logs of the projects deprecated

	   Get recent logs of the projects, it only query the previous version's audit log*/
	GetLogs(ctx context.Context, params *GetLogsParams) (*GetLogsOK, error)
	/*
	   GetProject returns specific project detail information

	   This endpoint returns specific project information by project ID.*/
	GetProject(ctx context.Context, params *GetProjectParams) (*GetProjectOK, error)
	/*
	   GetProjectDeletable gets the deletable status of the project

	   Get the deletable status of the project*/
	GetProjectDeletable(ctx context.Context, params *GetProjectDeletableParams) (*GetProjectDeletableOK, error)
	/*
	   GetProjectSummary gets summary of the project

	   Get summary of the project.*/
	GetProjectSummary(ctx context.Context, params *GetProjectSummaryParams) (*GetProjectSummaryOK, error)
	/*
	   GetScannerOfProject gets project level scanner

	   Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned.*/
	GetScannerOfProject(ctx context.Context, params *GetScannerOfProjectParams) (*GetScannerOfProjectOK, error)
	/*
	   HeadProject checks if the project name user provided already exists

	   This endpoint is used to check if the project name provided already exist.*/
	HeadProject(ctx context.Context, params *HeadProjectParams) (*HeadProjectOK, error)
	/*
	   ListArtifactsOfProject lists artifacts

	   List artifacts of the specified project*/
	ListArtifactsOfProject(ctx context.Context, params *ListArtifactsOfProjectParams) (*ListArtifactsOfProjectOK, error)
	/*
	   ListProjects lists projects

	   This endpoint returns projects created by Harbor.*/
	ListProjects(ctx context.Context, params *ListProjectsParams) (*ListProjectsOK, error)
	/*
	   ListScannerCandidatesOfProject gets scanner registration candidates for configurating project level scanner

	   Retrieve the system configured scanner registrations as candidates of setting project level scanner.*/
	ListScannerCandidatesOfProject(ctx context.Context, params *ListScannerCandidatesOfProjectParams) (*ListScannerCandidatesOfProjectOK, error)
	/*
	   SetScannerOfProject configures scanner for the specified project

	   Set one of the system configured scanner registration as the indepndent scanner of the specified project.*/
	SetScannerOfProject(ctx context.Context, params *SetScannerOfProjectParams) (*SetScannerOfProjectOK, error)
	/*
	   UpdateProject updates properties for a selected project

	   This endpoint is aimed to update the properties of a project.*/
	UpdateProject(ctx context.Context, params *UpdateProjectParams) (*UpdateProjectOK, error)
}

// New creates a new project API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for project API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreateProject creates a new project

This endpoint is for user to create a new project.
*/
func (a *Client) CreateProject(ctx context.Context, params *CreateProjectParams) (*CreateProjectCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProject",
		Method:             "POST",
		PathPattern:        "/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProjectCreated), nil

}

/*
DeleteProject deletes project by project ID

This endpoint is aimed to delete project by project ID.
*/
func (a *Client) DeleteProject(ctx context.Context, params *DeleteProjectParams) (*DeleteProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProject",
		Method:             "DELETE",
		PathPattern:        "/projects/{project_name_or_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProjectOK), nil

}

/*
GetLogExts gets recent logs of the projects

Get recent logs of the projects
*/
func (a *Client) GetLogExts(ctx context.Context, params *GetLogExtsParams) (*GetLogExtsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLogExts",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/auditlog-exts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLogExtsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLogExtsOK), nil

}

/*
GetLogs gets recent logs of the projects deprecated

Get recent logs of the projects, it only query the previous version's audit log
*/
func (a *Client) GetLogs(ctx context.Context, params *GetLogsParams) (*GetLogsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLogs",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLogsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLogsOK), nil

}

/*
GetProject returns specific project detail information

This endpoint returns specific project information by project ID.
*/
func (a *Client) GetProject(ctx context.Context, params *GetProjectParams) (*GetProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProject",
		Method:             "GET",
		PathPattern:        "/projects/{project_name_or_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProjectOK), nil

}

/*
GetProjectDeletable gets the deletable status of the project

Get the deletable status of the project
*/
func (a *Client) GetProjectDeletable(ctx context.Context, params *GetProjectDeletableParams) (*GetProjectDeletableOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectDeletable",
		Method:             "GET",
		PathPattern:        "/projects/{project_name_or_id}/_deletable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectDeletableReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProjectDeletableOK), nil

}

/*
GetProjectSummary gets summary of the project

Get summary of the project.
*/
func (a *Client) GetProjectSummary(ctx context.Context, params *GetProjectSummaryParams) (*GetProjectSummaryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectSummary",
		Method:             "GET",
		PathPattern:        "/projects/{project_name_or_id}/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectSummaryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProjectSummaryOK), nil

}

/*
GetScannerOfProject gets project level scanner

Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned.
*/
func (a *Client) GetScannerOfProject(ctx context.Context, params *GetScannerOfProjectParams) (*GetScannerOfProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScannerOfProject",
		Method:             "GET",
		PathPattern:        "/projects/{project_name_or_id}/scanner",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetScannerOfProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetScannerOfProjectOK), nil

}

/*
HeadProject checks if the project name user provided already exists

This endpoint is used to check if the project name provided already exist.
*/
func (a *Client) HeadProject(ctx context.Context, params *HeadProjectParams) (*HeadProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "headProject",
		Method:             "HEAD",
		PathPattern:        "/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HeadProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HeadProjectOK), nil

}

/*
ListArtifactsOfProject lists artifacts

List artifacts of the specified project
*/
func (a *Client) ListArtifactsOfProject(ctx context.Context, params *ListArtifactsOfProjectParams) (*ListArtifactsOfProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listArtifactsOfProject",
		Method:             "GET",
		PathPattern:        "/projects/{project_name_or_id}/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListArtifactsOfProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListArtifactsOfProjectOK), nil

}

/*
ListProjects lists projects

This endpoint returns projects created by Harbor.
*/
func (a *Client) ListProjects(ctx context.Context, params *ListProjectsParams) (*ListProjectsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProjects",
		Method:             "GET",
		PathPattern:        "/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListProjectsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProjectsOK), nil

}

/*
ListScannerCandidatesOfProject gets scanner registration candidates for configurating project level scanner

Retrieve the system configured scanner registrations as candidates of setting project level scanner.
*/
func (a *Client) ListScannerCandidatesOfProject(ctx context.Context, params *ListScannerCandidatesOfProjectParams) (*ListScannerCandidatesOfProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listScannerCandidatesOfProject",
		Method:             "GET",
		PathPattern:        "/projects/{project_name_or_id}/scanner/candidates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListScannerCandidatesOfProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListScannerCandidatesOfProjectOK), nil

}

/*
SetScannerOfProject configures scanner for the specified project

Set one of the system configured scanner registration as the indepndent scanner of the specified project.
*/
func (a *Client) SetScannerOfProject(ctx context.Context, params *SetScannerOfProjectParams) (*SetScannerOfProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setScannerOfProject",
		Method:             "PUT",
		PathPattern:        "/projects/{project_name_or_id}/scanner",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetScannerOfProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetScannerOfProjectOK), nil

}

/*
UpdateProject updates properties for a selected project

This endpoint is aimed to update the properties of a project.
*/
func (a *Client) UpdateProject(ctx context.Context, params *UpdateProjectParams) (*UpdateProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProject",
		Method:             "PUT",
		PathPattern:        "/projects/{project_name_or_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProjectOK), nil

}
