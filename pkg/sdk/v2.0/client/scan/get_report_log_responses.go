// Code generated by go-swagger; DO NOT EDIT.

package scan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/goharbor/go-client/pkg/sdk/v2.0/models"
)

// GetReportLogReader is a Reader for the GetReportLog structure.
type GetReportLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReportLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReportLogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetReportLogBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetReportLogUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetReportLogForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReportLogNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetReportLogInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetReportLogOK creates a GetReportLogOK with default headers values
func NewGetReportLogOK() *GetReportLogOK {
	return &GetReportLogOK{}
}

/*
GetReportLogOK describes a response with status code 200, with default header values.

Successfully get scan log file
*/
type GetReportLogOK struct {
	Payload string
}

// IsSuccess returns true when this get report log o k response has a 2xx status code
func (o *GetReportLogOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get report log o k response has a 3xx status code
func (o *GetReportLogOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report log o k response has a 4xx status code
func (o *GetReportLogOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get report log o k response has a 5xx status code
func (o *GetReportLogOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get report log o k response a status code equal to that given
func (o *GetReportLogOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetReportLogOK) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log][%d] getReportLogOK  %+v", 200, o.Payload)
}

func (o *GetReportLogOK) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log][%d] getReportLogOK  %+v", 200, o.Payload)
}

func (o *GetReportLogOK) GetPayload() string {
	return o.Payload
}

func (o *GetReportLogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportLogBadRequest creates a GetReportLogBadRequest with default headers values
func NewGetReportLogBadRequest() *GetReportLogBadRequest {
	return &GetReportLogBadRequest{}
}

/*
GetReportLogBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetReportLogBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get report log bad request response has a 2xx status code
func (o *GetReportLogBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report log bad request response has a 3xx status code
func (o *GetReportLogBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report log bad request response has a 4xx status code
func (o *GetReportLogBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report log bad request response has a 5xx status code
func (o *GetReportLogBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get report log bad request response a status code equal to that given
func (o *GetReportLogBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetReportLogBadRequest) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log][%d] getReportLogBadRequest  %+v", 400, o.Payload)
}

func (o *GetReportLogBadRequest) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log][%d] getReportLogBadRequest  %+v", 400, o.Payload)
}

func (o *GetReportLogBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetReportLogBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportLogUnauthorized creates a GetReportLogUnauthorized with default headers values
func NewGetReportLogUnauthorized() *GetReportLogUnauthorized {
	return &GetReportLogUnauthorized{}
}

/*
GetReportLogUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetReportLogUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get report log unauthorized response has a 2xx status code
func (o *GetReportLogUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report log unauthorized response has a 3xx status code
func (o *GetReportLogUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report log unauthorized response has a 4xx status code
func (o *GetReportLogUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report log unauthorized response has a 5xx status code
func (o *GetReportLogUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get report log unauthorized response a status code equal to that given
func (o *GetReportLogUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetReportLogUnauthorized) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log][%d] getReportLogUnauthorized  %+v", 401, o.Payload)
}

func (o *GetReportLogUnauthorized) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log][%d] getReportLogUnauthorized  %+v", 401, o.Payload)
}

func (o *GetReportLogUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetReportLogUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportLogForbidden creates a GetReportLogForbidden with default headers values
func NewGetReportLogForbidden() *GetReportLogForbidden {
	return &GetReportLogForbidden{}
}

/*
GetReportLogForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetReportLogForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get report log forbidden response has a 2xx status code
func (o *GetReportLogForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report log forbidden response has a 3xx status code
func (o *GetReportLogForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report log forbidden response has a 4xx status code
func (o *GetReportLogForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report log forbidden response has a 5xx status code
func (o *GetReportLogForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get report log forbidden response a status code equal to that given
func (o *GetReportLogForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetReportLogForbidden) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log][%d] getReportLogForbidden  %+v", 403, o.Payload)
}

func (o *GetReportLogForbidden) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log][%d] getReportLogForbidden  %+v", 403, o.Payload)
}

func (o *GetReportLogForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetReportLogForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportLogNotFound creates a GetReportLogNotFound with default headers values
func NewGetReportLogNotFound() *GetReportLogNotFound {
	return &GetReportLogNotFound{}
}

/*
GetReportLogNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetReportLogNotFound struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get report log not found response has a 2xx status code
func (o *GetReportLogNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report log not found response has a 3xx status code
func (o *GetReportLogNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report log not found response has a 4xx status code
func (o *GetReportLogNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report log not found response has a 5xx status code
func (o *GetReportLogNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get report log not found response a status code equal to that given
func (o *GetReportLogNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetReportLogNotFound) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log][%d] getReportLogNotFound  %+v", 404, o.Payload)
}

func (o *GetReportLogNotFound) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log][%d] getReportLogNotFound  %+v", 404, o.Payload)
}

func (o *GetReportLogNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetReportLogNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportLogInternalServerError creates a GetReportLogInternalServerError with default headers values
func NewGetReportLogInternalServerError() *GetReportLogInternalServerError {
	return &GetReportLogInternalServerError{}
}

/*
GetReportLogInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetReportLogInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get report log internal server error response has a 2xx status code
func (o *GetReportLogInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report log internal server error response has a 3xx status code
func (o *GetReportLogInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report log internal server error response has a 4xx status code
func (o *GetReportLogInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get report log internal server error response has a 5xx status code
func (o *GetReportLogInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get report log internal server error response a status code equal to that given
func (o *GetReportLogInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetReportLogInternalServerError) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log][%d] getReportLogInternalServerError  %+v", 500, o.Payload)
}

func (o *GetReportLogInternalServerError) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log][%d] getReportLogInternalServerError  %+v", 500, o.Payload)
}

func (o *GetReportLogInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetReportLogInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
