// Code generated by go-swagger; DO NOT EDIT.

package scan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/goharbor/go-client/pkg/sdk/v2.0/models"
)

// StopScanArtifactReader is a Reader for the StopScanArtifact structure.
type StopScanArtifactReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopScanArtifactReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewStopScanArtifactAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStopScanArtifactBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStopScanArtifactUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStopScanArtifactForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopScanArtifactNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewStopScanArtifactUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStopScanArtifactInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStopScanArtifactAccepted creates a StopScanArtifactAccepted with default headers values
func NewStopScanArtifactAccepted() *StopScanArtifactAccepted {
	return &StopScanArtifactAccepted{}
}

/*
StopScanArtifactAccepted describes a response with status code 202, with default header values.

Accepted
*/
type StopScanArtifactAccepted struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string
}

// IsSuccess returns true when this stop scan artifact accepted response has a 2xx status code
func (o *StopScanArtifactAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop scan artifact accepted response has a 3xx status code
func (o *StopScanArtifactAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop scan artifact accepted response has a 4xx status code
func (o *StopScanArtifactAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop scan artifact accepted response has a 5xx status code
func (o *StopScanArtifactAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this stop scan artifact accepted response a status code equal to that given
func (o *StopScanArtifactAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *StopScanArtifactAccepted) Error() string {
	return fmt.Sprintf("[POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop][%d] stopScanArtifactAccepted ", 202)
}

func (o *StopScanArtifactAccepted) String() string {
	return fmt.Sprintf("[POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop][%d] stopScanArtifactAccepted ", 202)
}

func (o *StopScanArtifactAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	return nil
}

// NewStopScanArtifactBadRequest creates a StopScanArtifactBadRequest with default headers values
func NewStopScanArtifactBadRequest() *StopScanArtifactBadRequest {
	return &StopScanArtifactBadRequest{}
}

/*
StopScanArtifactBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type StopScanArtifactBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this stop scan artifact bad request response has a 2xx status code
func (o *StopScanArtifactBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop scan artifact bad request response has a 3xx status code
func (o *StopScanArtifactBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop scan artifact bad request response has a 4xx status code
func (o *StopScanArtifactBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop scan artifact bad request response has a 5xx status code
func (o *StopScanArtifactBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stop scan artifact bad request response a status code equal to that given
func (o *StopScanArtifactBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *StopScanArtifactBadRequest) Error() string {
	return fmt.Sprintf("[POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop][%d] stopScanArtifactBadRequest  %+v", 400, o.Payload)
}

func (o *StopScanArtifactBadRequest) String() string {
	return fmt.Sprintf("[POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop][%d] stopScanArtifactBadRequest  %+v", 400, o.Payload)
}

func (o *StopScanArtifactBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *StopScanArtifactBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopScanArtifactUnauthorized creates a StopScanArtifactUnauthorized with default headers values
func NewStopScanArtifactUnauthorized() *StopScanArtifactUnauthorized {
	return &StopScanArtifactUnauthorized{}
}

/*
StopScanArtifactUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StopScanArtifactUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this stop scan artifact unauthorized response has a 2xx status code
func (o *StopScanArtifactUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop scan artifact unauthorized response has a 3xx status code
func (o *StopScanArtifactUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop scan artifact unauthorized response has a 4xx status code
func (o *StopScanArtifactUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop scan artifact unauthorized response has a 5xx status code
func (o *StopScanArtifactUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stop scan artifact unauthorized response a status code equal to that given
func (o *StopScanArtifactUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *StopScanArtifactUnauthorized) Error() string {
	return fmt.Sprintf("[POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop][%d] stopScanArtifactUnauthorized  %+v", 401, o.Payload)
}

func (o *StopScanArtifactUnauthorized) String() string {
	return fmt.Sprintf("[POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop][%d] stopScanArtifactUnauthorized  %+v", 401, o.Payload)
}

func (o *StopScanArtifactUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *StopScanArtifactUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopScanArtifactForbidden creates a StopScanArtifactForbidden with default headers values
func NewStopScanArtifactForbidden() *StopScanArtifactForbidden {
	return &StopScanArtifactForbidden{}
}

/*
StopScanArtifactForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StopScanArtifactForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this stop scan artifact forbidden response has a 2xx status code
func (o *StopScanArtifactForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop scan artifact forbidden response has a 3xx status code
func (o *StopScanArtifactForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop scan artifact forbidden response has a 4xx status code
func (o *StopScanArtifactForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop scan artifact forbidden response has a 5xx status code
func (o *StopScanArtifactForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stop scan artifact forbidden response a status code equal to that given
func (o *StopScanArtifactForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *StopScanArtifactForbidden) Error() string {
	return fmt.Sprintf("[POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop][%d] stopScanArtifactForbidden  %+v", 403, o.Payload)
}

func (o *StopScanArtifactForbidden) String() string {
	return fmt.Sprintf("[POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop][%d] stopScanArtifactForbidden  %+v", 403, o.Payload)
}

func (o *StopScanArtifactForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *StopScanArtifactForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopScanArtifactNotFound creates a StopScanArtifactNotFound with default headers values
func NewStopScanArtifactNotFound() *StopScanArtifactNotFound {
	return &StopScanArtifactNotFound{}
}

/*
StopScanArtifactNotFound describes a response with status code 404, with default header values.

Not found
*/
type StopScanArtifactNotFound struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this stop scan artifact not found response has a 2xx status code
func (o *StopScanArtifactNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop scan artifact not found response has a 3xx status code
func (o *StopScanArtifactNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop scan artifact not found response has a 4xx status code
func (o *StopScanArtifactNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop scan artifact not found response has a 5xx status code
func (o *StopScanArtifactNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop scan artifact not found response a status code equal to that given
func (o *StopScanArtifactNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *StopScanArtifactNotFound) Error() string {
	return fmt.Sprintf("[POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop][%d] stopScanArtifactNotFound  %+v", 404, o.Payload)
}

func (o *StopScanArtifactNotFound) String() string {
	return fmt.Sprintf("[POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop][%d] stopScanArtifactNotFound  %+v", 404, o.Payload)
}

func (o *StopScanArtifactNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *StopScanArtifactNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopScanArtifactUnprocessableEntity creates a StopScanArtifactUnprocessableEntity with default headers values
func NewStopScanArtifactUnprocessableEntity() *StopScanArtifactUnprocessableEntity {
	return &StopScanArtifactUnprocessableEntity{}
}

/*
StopScanArtifactUnprocessableEntity describes a response with status code 422, with default header values.

Unsupported Type
*/
type StopScanArtifactUnprocessableEntity struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this stop scan artifact unprocessable entity response has a 2xx status code
func (o *StopScanArtifactUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop scan artifact unprocessable entity response has a 3xx status code
func (o *StopScanArtifactUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop scan artifact unprocessable entity response has a 4xx status code
func (o *StopScanArtifactUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop scan artifact unprocessable entity response has a 5xx status code
func (o *StopScanArtifactUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this stop scan artifact unprocessable entity response a status code equal to that given
func (o *StopScanArtifactUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *StopScanArtifactUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop][%d] stopScanArtifactUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *StopScanArtifactUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop][%d] stopScanArtifactUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *StopScanArtifactUnprocessableEntity) GetPayload() *models.Errors {
	return o.Payload
}

func (o *StopScanArtifactUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopScanArtifactInternalServerError creates a StopScanArtifactInternalServerError with default headers values
func NewStopScanArtifactInternalServerError() *StopScanArtifactInternalServerError {
	return &StopScanArtifactInternalServerError{}
}

/*
StopScanArtifactInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type StopScanArtifactInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this stop scan artifact internal server error response has a 2xx status code
func (o *StopScanArtifactInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop scan artifact internal server error response has a 3xx status code
func (o *StopScanArtifactInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop scan artifact internal server error response has a 4xx status code
func (o *StopScanArtifactInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop scan artifact internal server error response has a 5xx status code
func (o *StopScanArtifactInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stop scan artifact internal server error response a status code equal to that given
func (o *StopScanArtifactInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *StopScanArtifactInternalServerError) Error() string {
	return fmt.Sprintf("[POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop][%d] stopScanArtifactInternalServerError  %+v", 500, o.Payload)
}

func (o *StopScanArtifactInternalServerError) String() string {
	return fmt.Sprintf("[POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop][%d] stopScanArtifactInternalServerError  %+v", 500, o.Payload)
}

func (o *StopScanArtifactInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *StopScanArtifactInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
