// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScanType scan type
//
// swagger:model ScanType
type ScanType struct {

	// The scan type for the scan request. Two options are currently supported, vulnerability and sbom
	// Enum: [vulnerability sbom]
	ScanType string `json:"scan_type,omitempty"`
}

// Validate validates this scan type
func (m *ScanType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScanType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var scanTypeTypeScanTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["vulnerability","sbom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scanTypeTypeScanTypePropEnum = append(scanTypeTypeScanTypePropEnum, v)
	}
}

const (

	// ScanTypeScanTypeVulnerability captures enum value "vulnerability"
	ScanTypeScanTypeVulnerability string = "vulnerability"

	// ScanTypeScanTypeSbom captures enum value "sbom"
	ScanTypeScanTypeSbom string = "sbom"
)

// prop value enum
func (m *ScanType) validateScanTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scanTypeTypeScanTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScanType) validateScanType(formats strfmt.Registry) error {
	if swag.IsZero(m.ScanType) { // not required
		return nil
	}

	// value enum
	if err := m.validateScanTypeEnum("scan_type", "body", m.ScanType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this scan type based on context it is used
func (m *ScanType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScanType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScanType) UnmarshalBinary(b []byte) error {
	var res ScanType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
